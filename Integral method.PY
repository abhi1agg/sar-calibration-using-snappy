import snappy
from snappy import jpy
from snappy import GPF
from snappy import ProductIO

import math

import tkinter
from tkinter.filedialog import askopenfilename
from tkinter import Label
from tkinter import Entry
from tkinter import OptionMenu
from tkinter import Frame
from tkinter import messagebox
from tkinter import filedialog

import base64
import os
import PIL
import numpy as np
from PIL import ImageTk
from PIL import Image


document = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Documents')
savefile=open('%s/snappy.txt'%document,'w')
savefile.write('Method used for calculating Calibration Constant(K) = Integral Method\n')


##############################do not touch
encoded_string=b''
##########################################

with open("%s/pict.jpg"%document, "wb") as fh:
    fh.write(base64.decodebytes(encoded_string))


Lab=[]
text_ar1=[]
text_ar2=[]
frame1=[]
frame2=[]
coordinateArray=[]


BandNames=['Product not Selected']
filename=''

def create_bset(a,b):
    global outer_box
    global band
    a=str(a)
    b=str(b)
    c=str(bg[0])
    d=str(bg[1])
    HashMap = jpy.get_type('java.util.HashMap')
    GPF.getDefaultInstance().getOperatorSpiRegistry().loadOperatorSpis()
    parameters = HashMap()
    parameters.put('copyMetadata', True)
    parameters.put('region', "%s,%s,%s,%s"%(a,b,c,d))
    b_set=GPF.createProduct('Subset', parameters,outer_box)
    Band=b_set.getBand('%s'%band)
    w = Band.getRasterWidth()
    h = Band.getRasterHeight()
    Band_data = np.zeros(w * h, np.float32)
    bset=Band.readPixels(0, 0, w, h, Band_data)
    
    return bset
def findk():
    global number
    global sigma
    global alpha
    global range_space
    global azimuth_space
    global outer_box
    global OpMenu
    global band
    global p
    global bg
    global alpha
    global freq
    global l
    global sigma
    global range_space
    global azimuth_space

    
    value=0
    K=[]
    band=str(OpMenu.get())
    for i in range(number):
    
        savefile.write('Coordinate'+str(i+1)+"  is ("+str(coordinateArray[i][0])+"," +str(coordinateArray[i][1])+")\n\n"      )
        HashMap = jpy.get_type('java.util.HashMap')
        GPF.getDefaultInstance().getOperatorSpiRegistry().loadOperatorSpis()
        parameters = HashMap()
        parameters.put('copyMetadata', True)
    

#creating upper-left corner of outermost subset
        a=int(coordinateArray[i][0])-(outer[0]//2)
        b=int(coordinateArray[i][1])-(outer[1]//2)
        str_a=str(a)
        str_b=str(b)
        str_0=str(outer[0])
        str_1=str(outer[1])

#creating outer subset
    
        parameters.put('region', "%s,%s,%s,%s"%(str_a,str_b,str_0,str_1))
        outer_box=GPF.createProduct('Subset', parameters, p)
        Band=outer_box.getBand('%s'%band)
        w = Band.getRasterWidth()
        h = Band.getRasterHeight()
        Band_data = np.zeros(w * h, np.float32)
        ar_ph=Band.readPixels(0, 0, w, h, Band_data)
        a_toprint=arr12(ar_ph,int(str_1),int(str_0))
        savefile.write('%sx%s subset around coordinate'%(str_0,str_1)+str(i+1)+"\n\n")
        savefile.write('[\n')
        savefile.writelines(["%s\n" % item  for item in a_toprint])
        savefile.write(']\n\n')
        #Band_data.shape=h,w
        #imgplot = plt.imshow(Band_data)
        #plt.show()
        savefile.write('Side Length of corner reflector = %s m\n'%str(l))
        savefile.write('Frequency of Radiation = %s MHz\n'%str(freq))
        savefile.write('Radar Cross Section = %s m^2\n'%str(sigma))
        savefile.write('Angle of Incidence = %s degrees'%str(alpha))
        savefile.write('Range Spacing = %s\n'%str(range_space))
        savefile.write('Azimuth Spacing = %s\n'%str(azimuth_space))
        savefile.write('Choosen Band is %s\n\n'%band)
#creating four background subsets
        b1=create_bset(0,0)
        b2=create_bset(outer[0]-bg[0],0)
        b3=create_bset(0,outer[1]-bg[1])
        b4=create_bset(outer[0]-bg[0],outer[1]-bg[1])

        sum_b1=arr_sum(b1)
        sum_b2=arr_sum(b2)
        sum_b3=arr_sum(b3)
        sum_b4=arr_sum(b4)
        sum_b=sum_b1+sum_b2+sum_b3+sum_b4
        
        savefile.write('Sum of Intensities of first %sx%s  background subset,'%(str(bg[0]),str(bg[1]))+'Sum_b1 = %s'%str(sum_b1)+'\n')
        savefile.write('Sum of Intensities of second %sx%s background subset,'%(str(bg[0]),str(bg[1]))+'Sum_b2 = %s'%str(sum_b2)+'\n')
        savefile.write('Sum of Intensities of third %sx%s  background subset,'%(str(bg[0]),str(bg[1]))+'Sum_b3 = %s'%str(sum_b3)+'\n')
        savefile.write('Sum of Intensities of fourth %sx%s background subset,'%(str(bg[0]),str(bg[1]))+'Sum_b4 = %s'%str(sum_b4)+'\n')
        savefile.write('Sum of pixel Intensities of all pixel represented by black region,Sum_b = %s\n'%sum_b)



        NB=len(b1)+len(b2)+len(b3)+len(b4)
    
# making plus design(in 3 steps)

        y=coordinateArray[i][1]-1
        y=str(y)
        parameters.put('region',"%s,%s,%s,3"%(a,y,str_0))
        s1=GPF.createProduct('Subset', parameters, p)
        Band=s1.getBand('%s'%band)
        w = Band.getRasterWidth()
        h = Band.getRasterHeight()
        Band_data = np.zeros(w * h, np.float32)
        ar1=Band.readPixels(0, 0, w, h, Band_data)
        sum1=arr_sum(ar1)

        x=coordinateArray[i][0]-1
        x=str(x)
        parameters.put('region',"%s,%s,3,%s"%(x,b,str_1))
        s2=GPF.createProduct('Subset', parameters, p)
        Band=s2.getBand('%s'%band)
        w = Band.getRasterWidth()
        h = Band.getRasterHeight()
        Band_data = np.zeros(w * h, np.float32)
        ar2=Band.readPixels(0, 0, w, h, Band_data)
        sum2=arr_sum(ar2)

        x=coordinateArray[i][0]-1
        y=coordinateArray[i][1]-1
        parameters.put('region',"%s,%s,3,3"%(x,y))
        s3=GPF.createProduct('Subset', parameters, p)
        Band=s3.getBand('%s'%band)
        w = Band.getRasterWidth()
        h = Band.getRasterHeight()
        Band_data = np.zeros(w * h, np.float32)
        ar3=Band.readPixels(0, 0, w, h, Band_data)
        sum3=arr_sum(ar3)
    

        NA=len(ar1)+len(ar2)-len(ar3)
        sum_a=sum1+sum2-sum3
        savefile.write('Sum of pixel Intensities of all pixel represented by blue region,Sum_a = %s\n'%sum_a)
        savefile.write('NA = %s,NB = %s\n\n'%(str(NA),str(NB)))

        absilun=(sum_a-((NA/NB)*sum_b))*range_space*azimuth_space
        trig=math.sin((alpha*(math.pi))/180)
        sigma=float(sigma)
        k=absilun/(sigma*trig)
        try:
            k=10*math.log10(k)
            K.append(k)
            savefile.write('This coordinate may or mayn\'t be corner reflector\n')
            savefile.write('Value of Calibration Constant for given coordinate k= %s\n\n'%str(k))
        except ValueError:
            savefile.write('This coordinate can\'t be corner reflector\n')
            savefile.write('Value of Calibration constant for this coordinate is undefined\n\n')
            
    try:
        value=arr_sum(K)/len(K)
    except ZeroDivisionError:
        value=-1
        
    return value    
        
def get_coordinateArray():
    
     
    global root
    global e1
    global e2
    global e3
    global e4
    global coordinateArray
    coordinateArray=[]
    for i in range(number):
        coordinateArray.append((int(text_ar1[i].get()),int(text_ar2[i].get())))
      
    root=tkinter.Toplevel()
    root.title('Specify Dimensions')
    
    img = ImageTk.PhotoImage(Image.open('%s/pict.jpg'%document))
    panel = tkinter.Label(root, image = img)
    panel.grid(row=0,column=0,sticky='W')
    m1 = tkinter.PanedWindow(root)
    m1.grid(row=1,column=0,sticky='W')
    e1=Entry(m1,width=6)
    e2=Entry(m1,width=6)
    l1=tkinter.Label(m1,padx=10,pady=10,text='Dimension of outermost Box')
    l2=tkinter.Label(m1,padx=1,pady=1,text='X')
    m1.add(l1)
    m1.add(e1)
    m1.add(l2)
    m1.add(e2)
 


    m2 = tkinter.PanedWindow(root)
    m2.grid(row=2,column=0,sticky='W')
    e3=Entry(m2,width=6)
    e4=Entry(m2,width=6)
    l3=tkinter.Label(m2,padx=11.34,pady=11,text='Dimension of black Box        ')
    l4=tkinter.Label(m2,padx=1,pady=1,text='X')
    m2.add(l3)
    m2.add(e3)
    m2.add(l4)
    m2.add(e4)

    m3 = tkinter.PanedWindow(root)
    m3.grid(row=3,column=0,sticky='W')
    b1=tkinter.Button(m3,text='Submit',width=42,bd=5,command=get_dimensions)
    m3.add(b1)
    root.mainloop()
    
def selectfile():
    global filename
    global L1
    global p
    global BandNames
    global OpMenu
    global opmenu
    filename=askopenfilename()
    p=ProductIO.readProduct(filename)
    BandNames=list(p.getBandNames())
    opmenu.destroy()
    savefile.write('Product selected is %s\n\n'%filename)
    opmenu = OptionMenu(top, OpMenu,*BandNames)
    opmenu.grid(row=7,column=0,sticky='W')
    L1=tkinter.Label(top,padx=10,pady=10,text='FILE SELECTED')
    L1.grid(row=0,column=1)
    B2['state']='normal'

def arr12(arr,c1,r1):
    c=0
    i=0
    col=[]
    while c<c1:
        r=0
        row=[]
        while r<r1:
            row.append(arr[i])
            i=i+1
            r=r+1
        col.append(row)
        c=c+1
    return col
def arr_sum(arr):
    i=0
    sum=0
    while i<len(arr):
        sum=sum+arr[i]
        i=i+1
    return sum

def get_dimensions():

    global root
    global outer
    global bg
    global e1
    global e2
    global e3
    global e4
    outer=[]
    bg=[]
    
    value1=int(e1.get())
    outer.append(value1)
    value2=int(e2.get())
    outer.append(value2)

    value1=int(e3.get())
    bg.append(value1)
    value2=int(e4.get())
    bg.append(value2)

    
    a=findk()
    root.destroy()
    
    if(a==-1):
        messagebox.showinfo('Value of K Using Integral Method','ZeroDivisionError[Wrong Input]')
        savefile.write('Calibration Constant could not be determined for given coodinates_____End of this iteration\n\n\n')
    else:
        messagebox.showinfo('Value of K Using Integral Method','K = %s'%str(a))
        savefile.write('Mean Value of Calibration Constant,K=%s_____End of this iteration\n\n\n'%str(a))
        




    
    
def calculate_sigma():
    global l
    global freq
    global alpha
    global sigma
    global L5
    global top
    global range_space
    global azimuth_space
    global number
    global Lab
    global text_ar1
    global text_ar2
    global frame1
    global frame2
    global b_1
    global coordinateArray

    coordinateArray=[]


    for label in Lab:
        label.destroy()
        b_1.destroy()
    for frame in frame1:
        frame.destroy()
    for frame in frame2:
        frame.destroy()
      
    Lab=[]
    text_ar1=[]
    text_ar2=[]
    frame1=[]
    frame2=[]

    
    l=E1.get()
    freq=E2.get()
    alpha=E3.get()
    range_space=float(E4.get())
    azimuth_space=float(E4d.get())
    number=int(E5.get())
    l=float(l)
    freq=float(freq)
    alpha=float(alpha)
    lambd=(3*(10**2))/(freq)
    num=4*math.pi*(l**4)
    den=3*(lambd**2)
    sigma=num/den
    sigma="{0:.2f}".format(sigma)
    
    for i in range(number):
        Lab.append(1)
        text_ar1.append(1)
        text_ar2.append(1)
        frame1.append(1)
        frame2.append(1)

    for i in range(number):
        Lab[i]=tkinter.Label(top,padx=10,pady=10,text='     X'+str(i+1)+"  "+'Y'+str(i+1))
        Lab[i].grid(row=8+i,column=0,sticky='W')
        frame1[i]=Frame()
        text_ar1[i]=Entry(frame1[i],width=8)
        text_ar1[i].pack()
        frame1[i].grid(row=8+i,column=1)
        frame2[i]=Frame()
        text_ar2[i]=Entry(frame2[i],width=8)
        text_ar2[i].pack()
        frame2[i].grid(row=8+i,column=2)
    

    b_1=tkinter.Button(top,text='Submit',width=18,command=get_coordinateArray)
    b_1.grid(row=9+i,column=0,sticky='W')
    
   
    
    
top=tkinter.Tk()
top.title('Calculation of K using Integral Method')
B1=tkinter.Button(top,text='Select Product',relief='raised',width=15,height=1,bd=3,command=selectfile)
B1.grid(row=0,column=0,sticky='W')

B2=tkinter.Button(top,text='Confirm',command=calculate_sigma)
B2.grid(row=6,column=2,sticky='E')

L2=Label(top,padx=10,pady=10,text='Side Length of Reflector')
L2.grid(row=1,column=0)
L2_u=Label(top,padx=10,pady=10,text='in meters')
L2_u.grid(row=1,column=2)
L3=Label(top,padx=10,pady=10,text="Frequency of Radiation ")
L3.grid(row=2,column=0)
L3_u=Label(top,padx=10,pady=10,text='in Mhz')
L3_u.grid(row=2,column=2)
L4=Label(top,padx=10,pady=10,text='Angle of Incidence        ')
L4.grid(row=3,column=0)
L4_u=Label(top,padx=10,pady=10,text='in degrees')
L4_u.grid(row=3,column=2)
L5=Label(top,padx=10,pady=10,text='Range Spacing')
L5.grid(row=4,column=0,sticky='W')
L5_u=Label(top,padx=10,pady=10,text='in meters')
L5_u.grid(row=4,column=2)
L5d=Label(top,padx=10,pady=10,text='Azimuth Spacing')
L5d.grid(row=5,column=0,sticky='W')
L5d_u=Label(top,padx=10,pady=10,text='in meters')
L5d_u.grid(row=5,column=2,sticky='W')

#L6.grid(row=5,column=0,sticky='W')
OpMenu = tkinter.StringVar()
OpMenu.set("Choose The Band") # default value
opmenu = OptionMenu(top, OpMenu,*BandNames)
opmenu.grid(row=7,column=0,sticky='W')
L7=Label(top,padx=10,pady=10,text='No. of Reflector')
L7.grid(row=6,column=0,sticky='W')












E1=Entry(top,width=8)
E1.grid(row=1,column=1)
E2=Entry(top,width=8)
E2.grid(row=2,column=1)
E3=Entry(top,width=8)
E3.grid(row=3,column=1)
E4=Entry(top,width=8)
E4.grid(row=4,column=1)
E4d=Entry(top,width=8)
E4d.grid(row=5,column=1)
E5=Entry(top,width=8)
E5.grid(row=6,column=1)



for child in top.winfo_children(): child.grid_configure(padx=5, pady=5)
top.mainloop()


root1 = tkinter.Tk()
root1.withdraw()
var = messagebox.askyesno("Snappy", "Do you want to save your work")

savefile.close()
savefile=open('%s/snappy.txt'%document,'r')
if var == True:
    f = filedialog.asksaveasfile(mode='w', defaultextension=".txt")
    if f == None:
        savefile.seek(0,0) #just for adding something to if statement
    else:
        savefile.seek(0,0)
        f.writelines([l for l in savefile.readlines()])
        f.close()

savefile.close()


